---
import '../styles/global.css'
---

<div class="w-fit rounded-2xl  window absolute transition-colors duration-300 flex flex-row">
    <div class="handle text-ctp-text bg-ctp-mantle text-center font-vt text-xl rounded-l-xl pr-3 translate-x-10 hover:translate-x-4 transition-all border-ctp-overlay0 hover:border-ctp-peach border-1 ease-out duration-250">
        <div class="w-min flex flex-col justify-between items-center py-2 px-1 h-full">
            <img src="https://icons.hackclub.com/api/icons/0xfab387/welcome" class="size-6">

            <span class="text-vertical text-3xl pointer-events-none">Welcome!</span>

            <img src="https://icons.hackclub.com/api/icons/0xed8796/view-close-small" class="size-6 hover:size-7 transition-all">
        </div>

    </div>
    <div class="z-20 p-5 bg-ctp-base rounded-xl border-ctp-subtext0 border-2">
        <slot />
    </div>

</div>

<script>

    // Dragging code from https://jams.hackclub.com/batch/webOS/part-3#Making%20The%20Window%20Movable

    for (const div of document.getElementsByClassName("window")) {
        dragElement(div)
    }
    // Step 1: Define a function called `dragElement` that makes an HTML element draggable.
    function dragElement(element: Element) {
        // Step 2: Set up variables to keep track of the element's position.
        var initialX = 0;
        var initialY = 0;
        var currentX = 0;
        var currentY = 0;

        // Step 3: Check if there is a special header element associated with the draggable element.
        if (element.querySelector(".handle")) {
            // Step 4: If present, assign the `dragMouseDown` function to the header's `onmousedown` event.
            // This allows you to drag the window around by its header.
            element.querySelector(".handle")!.onmousedown = startDragging;
        } else {
            // Step 5: If not present, assign the function directly to the draggable element's `onmousedown` event.
            // This allows you to drag the window by holding down anywhere on the window.
            element.onmousedown = startDragging;
        }

        // Step 6: Define the `startDragging` function to capture the initial mouse position and set up event listeners.
        function startDragging(e) {
            e = e || window.event;
            e.preventDefault();
            // Step 7: Get the mouse cursor position at startup.
            initialX = e.clientX;
            initialY = e.clientY;
            // Step 8: Set up event listeners for mouse movement (`elementDrag`) and mouse button release (`closeDragElement`).
            document.onmouseup = stopDragging;
            document.onmousemove = dragElement;
        }

        // Step 9: Define the `elementDrag` function to calculate the new position of the element based on mouse movement.
        function dragElement(e) {
            e = e || window.event;
            e.preventDefault();
            // Step 10: Calculate the new cursor position.
            currentX = initialX - e.clientX;
            currentY = initialY - e.clientY;
            initialX = e.clientX;
            initialY = e.clientY;
            // Step 11: Update the element's new position by modifying its `top` and `left` CSS properties.
            element.style.top = (element.offsetTop - currentY) + "px";
            element.style.left = (element.offsetLeft - currentX) + "px";
        }

        // Step 12: Define the `stopDragging` function to stop tracking mouse movement by removing the event listeners.
        function stopDragging() {
            document.onmouseup = null;
            document.onmousemove = null;
        }
    }
</script>