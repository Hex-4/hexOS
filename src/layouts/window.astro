---
import '../styles/global.css'

const { id = "welcome", title = "Welcome!", icon = "https://icons.hackclub.com/api/icons/0xfab387/welcome", closed = ""} = Astro.props;
---

<div class={`translate-0 rounded-2xl w-full md:w-auto window md:absolute static transition-all duration-300 md:translate-x-[calc(48vw-50%)] md:translate-y-[calc(42vh-50%)] md:flex md:flex-row ${closed === "true" ? "closed" : ""}`} id={id}>
    <div class="handle hidden md:block text-ctp-text bg-ctp-mantle text-center translate-x-10 hover:translate-x-4  font-vt text-xl rounded-l-xl md:pr-3 transition-all border-ctp-overlay0 hover:border-ctp-peach! border-1 ease-spring duration-400">
        <div class="w-min flex flex-col justify-between items-center py-2 px-1 h-full">
            <img src={icon} class="size-6">

            <span class="text-vertical text-3xl pointer-events-none">{title}</span>

            <img src="https://icons.hackclub.com/api/icons/0xed8796/view-close-small" class="size-6 hover:size-7 transition-all close">
        </div>

    </div>
    <div class="z-20 p-5 md:bg-ctp-base rounded-xl md:border-ctp-subtext0 md:border-2 w-full md:w-auto">
        <slot />
    </div>

</div>

<script>

    // Dragging code from https://jams.hackclub.com/batch/webOS/part-3#Making%20The%20Window%20Movable

    for (const div of document.getElementsByClassName("window")) {
        dragElement(div)
    }
    // Step 1: Define a function called `dragElement` that makes an HTML element draggable.
    function dragElement(element) {
        // Step 2: Set up variables to keep track of the element's position.
        var initialX = 0;
        var initialY = 0;
        var currentX = 0;
        var currentY = 0;

        element.querySelector(".handle")!.addEventListener('mousedown', startDragging);

        // Step 6: Define the `startDragging` function to capture the initial mouse position and set up event listeners.
        function startDragging(e) {
            e = e || window.event;
            e.preventDefault();
            element.style.transition = "none";
            // Step 7: Get the mouse cursor position at startup.
            initialX = e.clientX;
            initialY = e.clientY;
            // Step 8: Set up event listeners for mouse movement (`elementDrag`) and mouse button release (`closeDragElement`).
            document.onmouseup = stopDragging;
            document.onmousemove = dragElement;
        }

        // Step 9: Define the `elementDrag` function to calculate the new position of the element based on mouse movement.
        function dragElement(e) {
            e = e || window.event;
            e.preventDefault();
            // Step 10: Calculate the new cursor position.
            currentX = initialX - e.clientX;
            currentY = initialY - e.clientY;
            initialX = e.clientX;
            initialY = e.clientY;
            // Step 11: Update the element's new position by modifying its `top` and `left` CSS properties.
            element.style.top = (element.offsetTop - currentY) + "px";
            element.style.left = (element.offsetLeft - currentX) + "px";
        }

        // Step 12: Define the `stopDragging` function to stop tracking mouse movement by removing the event listeners.
        function stopDragging() {
            document.onmouseup = null;
            document.onmousemove = null;
            element.style.transition = "all 300ms";
        }
    }


    for (const element of document.getElementsByClassName("close")) {
        element.addEventListener("click", () => {
            element.closest(".window")?.classList.toggle("closed");
        })
    }
</script>